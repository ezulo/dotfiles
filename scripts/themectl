#!/usr/bin/env bash
set -e
IFS='
'

# Theme data
THEME_HOME=${THEME_HOME:-"$XDG_CONFIG_HOME/theme"}
TC_SKELETON="$THEME_HOME/.skeleton"

CREATE_THEME_SRC="${THEME_HOME}/.skeleton"
if [ ! -z $3 ]; then
    CREATE_THEME_SRC="${THEME_HOME}/${3}"
fi

check_opt() {
	status=1
	for theme in $AVAILABLE_THEMES; do
		if [ "$1" = $(basename "$theme") ]; then
			status=0
		fi
	done
	echo $status
}

print_available_themes() {
	echo "Choose from the following themes:" 
	echo "-----------------"
	for theme in $AVAILABLE_THEMES; do
		echo "$(basename $theme)"
	done
	echo "-----------------"
}

create_theme() {
    NEW_THEME=$1
    if [ ! -d "$CREATE_THEME_SRC" ]; then
        notify-warn $FUNCNAME \
            "Source theme not found: $CREATE_THEME_SRC. Using skeleton."
        CREATE_THEME_SRC="${THEME_HOME}/.skeleton"
    fi
    if [ ! -d "$CREATE_THEME_SRC" ]; then
        notify-log $FUNCNAME "Theme skeleton seems to be missing. Aborted."
        return 1
    fi
    if [ -z $NEW_THEME ]; then
        notify-log $FUNCNAME "Theme name missing. Aborted."
        return 1
    fi
    OUT_DIR="${THEME_HOME}/${NEW_THEME}"
    cp -r "$CREATE_THEME_SRC" "$OUT_DIR"
    notify-log $FUNCNAME "New theme created at ${OUT_DIR}"
    return 0
}

clean_all() {
    for MOD in "${THEME_MODULES[@]}"; do ${MOD}_clean; done
}
theme_all() {
    for MOD in "${THEME_MODULES[@]}"; do ${MOD}_theme; done
}
reload_all() {
    for MOD in "${THEME_MODULES[@]}"; do ${MOD}_reload; done
}

THEME_MODULES=
load_modules() {
    for MOD in "${THEME_MODULES[@]}"; do
        if [ ! -f "$XDG_CONFIG_HOME/scripts/include/themectl/modules/$MOD" ]; then
            >&2 echo "Missing module: $MOD"
            return 1
        fi
        source "$XDG_CONFIG_HOME/scripts/include/themectl/modules/$MOD"
        log_to_console $FUNCNAME "INFO" "Loaded $MOD"
    done
    source "$XDG_CONFIG_HOME/scripts/include/themectl/util/colors"
}

main() {
    source "$XDG_CONFIG_HOME/scripts/include/themectl/util/log"
    source "$XDG_CONFIG_HOME/scripts/include/themectl/util/file"
    case "$COMMAND" in
        "set")
            THEME_NEW=$ARG
            if [ $(check_opt $THEME_NEW) != 0 ]; then
                echo "Invalid argument."
                print_available_themes
                exit 1
            fi
            THEME=$THEME_NEW
            echo "$THEME" > "$THEME_HOME/current-theme"
            notify-log "$FUNCNAME" "Theme successfully changed to: $THEME"
            ;;&
        "clear")
            clear_files "$THEME_HOME/current-theme"
            THEME=
            ;;&
        "reload" | "clear" | "set")
            THEME=${THEME:-".skeleton"}
            TC_DIR="$THEME_HOME/$THEME" 
            load_modules
            clean_all
            theme_all
            reload_all
            notify-log $FUNCNAME "Theme loaded: $THEME"
            ;;
        "get")
            echo $THEME
            ;;
        "create")
            create_theme $ARG
            ;;
        *)
            echo "Unknown command: $COMMAND"
            ;;
    esac
}

readarray -t THEME_MODULES \
    < "$XDG_CONFIG_HOME/scripts/include/themectl/active-modules"

# Checks
if [ "${#THEME_MODULES[@]}" = "0" ]; then
    >&2 echo "No modules loaded. Nothing to do."
    exit 1
fi
if [ ! -d "$THEME_HOME" ]; then
    >&2 echo "No theme home found at ${THEME_HOME}. Exiting."
    exit 1
fi
if [ $# -eq 0 ]; then
	echo "No arguments supplied."
	exit 1
fi
COMMAND=$1
ARG=$2

# Get current theme data
[ ! -f "$THEME_HOME/current-theme" ] && touch "$THEME_HOME/current-theme"
THEME="$(cat $THEME_HOME/current-theme)"
AVAILABLE_THEMES="$(ls -1d $THEME_HOME/*/ | sed -e 's/\///')"

main

