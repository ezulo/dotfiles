#!/usr/bin/env bash
set -e

export _ID="themectl"
ID="$_ID"

# Utilities
INCLUDE_DIR="$XDG_CONFIG_HOME/scripts/include/themectl"
source "$INCLUDE_DIR/util/log"
source "$INCLUDE_DIR/util/file"
source "$INCLUDE_DIR/util/color"
source "$INCLUDE_DIR/util/css"

# Theme data
THEME_HOME=${THEME_HOME:-"$XDG_CONFIG_HOME/theme"}
THEME_DEFAULT=".skeleton"
export TC_DEFAULT="$THEME_HOME/$THEME_DEFAULT"

check_opt() {
	for theme in $AVAILABLE_THEMES; do
		[ "$1" = $(basename "$theme") ] && return 0
	done
    return 1
}

print_available_themes() {
    NO_STYLE=$1
    if [ ! -z "$NO_STYLE" ]; then
        for theme in $AVAILABLE_THEMES; do
            echo "$(basename $theme)"
        done
        exit 0
    fi
    echo "Choose from the following themes:" 
    echo "-----------------"
    for theme in $AVAILABLE_THEMES; do
        echo "$(basename $theme)"
    done
    echo "-----------------"
}

# Function for generating a metadata file (in markdown)
# Assumes output directory exists.
write_theme_meta() {
    local ID="$_ID:$FUNCNAME"
    local THEME="$1"
    local OUT_FILE=${2-"$THEME_HOME/$THEME/THEME.md"}
    [ ! -d "$(dirname $OUT_FILE)" ] &&
        log_error "$ID_" "Could not write: $OUT_FILE. Directory missing." &&
        return 1
    local FROM_THEME=${3-}
    local CONTENT="
        # Theme: $THEME\n
        Generated by Eduardo's theming script `$ID:create` at: $(timestamp_now)"
    log_debug "$ID_" "Metadata file written at $OUT_FILE"
    echo "$CONTENT" > $OUT_FILE
}

# Creates a new theme
# Optionally, from a source theme, otherwise uses the default ($THEME_DEFAULT)
create() {
    local ID="$_ID:$FUNCNAME"
    local NEW_THEME="$1" 
    local SRC_THEME="$2" # Optional
    if [ -z $NEW_THEME ]; then
        log_info "$ID_" "Theme name missing. Aborted."
        return 1
    fi
    local NEW_THEME_DIR="$THEME_HOME/$NEW_THEME"
    local SRC_THEME_DIR="$THEME_HOME/$SRC_THEME"
    [ -d "$NEW_THEME_DIR" ] &&
        log_warn $ID_ "A theme by the name $NEW_THEME already exists." &&
        return 1
    [ ! -d "$SRC_THEME_DIR" ] &&
        log_warn $ID_ "Source theme missing: $SRC_THEME. Using default." &&
        SRC_THEME="$THEME_DEFAULT" &&
        SRC_THEME_DIR="$THEME_HOME/$SRC_THEME"
    [ ! -d "$SRC_THEME_DIR" ] &&
        log_error $ID_ "FAILED: $SRC_THEME and default theme missing." &&
        return 1
    local OUT_DIR="${THEME_HOME}/${NEW_THEME}"
    mkdir -p "$OUT_DIR"
    write_theme_meta "$NEW_THEME"
    cp -r "$SRC_THEME_DIR" "$OUT_DIR"
    log_info $ID_ "New theme created at ${OUT_DIR}"
    return 0
}

ACTIVE_MODULES=
clean_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_clean; done
}
theme_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_theme; done
}
reload_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_reload; done
}
load_modules() {
    local ID="$_ID:$FUNCNAME"
    readarray -t ACTIVE_MODULES < "$INCLUDE_DIR/active-modules"
    for MOD in "${ACTIVE_MODULES[@]}"; do
        [ ! -f "$INCLUDE_DIR/modules/$MOD" ] &&
            log_warn $ID "Missing module: $MOD. Remove from active-modules" &&
            continue
        source "$INCLUDE_DIR/modules/$MOD"
        log_debug $ID "Loaded $MOD"
    done
}

THEME=
main() {
    local ID="$_ID:$FUNCNAME"
    COMMAND=$1
    shift
    ARG="$@"
    log_debug "$ID" "themectl command: $COMMAND"
    log_debug "$ID" "themectl args: $ARG"
    case "$COMMAND" in
        "get")
            echo $THEME
            ;;
        "ls")
            print_available_themes nostyle
            ;;
        "clear" | "color" | "create" | "reload" | "set")
            ;;&
        "color")
            COLORS_JSON="$THEME_HOME/$THEME/colors.json"
            themecolor $ARG # Unquoted on purpose
            ;;
        "create")
            create $ARG # Unquoted on purpose
            ;;
        "set")
            THEME_NEW="$ARG"
            [ $(check_opt $THEME_NEW) != 0 ] &&
                log_error $ID "Invalid argument: $THEME_NEW" &&
                print_available_themes &&
                exit 1
            [ "$THEME_NEW" = "$THEME" ] &&
                log_warn $ID \
                    "Theme already set to:\n\ > $THEME\n\n\
                    To reapply files, reload."+ &&
                exit 0
            THEME=$THEME_NEW
            echo "$THEME" > "$THEME_HOME/current-theme"
            log_info "$ID" "Theme files updated for: $THEME"
            ;;&
        "clear")
            clear_files "$THEME_HOME/current-theme"
            THEME=
            ;;&
        "clear" | "reload" | "set")
            THEME=${THEME:-"$THEME_DEFAULT"}
            COLORS_JSON="$THEME_HOME/$THEME/colors.json"
            TC_DIR="$THEME_HOME/$THEME" 
            load_modules "$INCLUDE_DIR/active-modules"
            clean_all && theme_all && reload_all && \
                log_info $FUNCNAME "Theme loaded: $THEME"
            ;;
        "log-test")
            log_trace $ID "hello!"
            log_debug $ID "hello!"
            log_info $ID "hello!"
            log_warn $ID "hello!"
            log_error $ID "hello!"
            log_fatal $ID "hello!"
            ;;
        *)
            echo "Unknown command: $COMMAND"
            ;;
    esac
}


# Checks
if [ "${#ACTIVE_MODULES[@]}" = "0" ]; then
    >&2 echo "No modules loaded. Nothing to do."
    exit 1
fi
if [ ! -d "$THEME_HOME" ]; then
    >&2 echo "No theme home found at ${THEME_HOME}. Exiting."
    exit 1
fi
if [ $# -eq 0 ]; then
	echo "No arguments supplied."
	exit 1
fi

# Get current theme data
[ ! -f "$THEME_HOME/current-theme" ] && touch "$THEME_HOME/current-theme"
THEME="$(cat $THEME_HOME/current-theme)"
AVAILABLE_THEMES="$(ls -1d $THEME_HOME/*/ | sed -e 's/\///')"

main $@

