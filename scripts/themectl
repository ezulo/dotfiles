#!/usr/bin/env bash
set -e

# Theme data
THEME_HOME=${THEME_HOME:-"$XDG_CONFIG_HOME/theme"}
TC_SKELETON="$THEME_HOME/.skeleton"

INCLUDE_DIR="$XDG_CONFIG_HOME/scripts/include/themectl"

CREATE_THEME_SRC="${THEME_HOME}/.skeleton"
if [ "$1" = "create" ] && [ ! -z $3 ]; then
    CREATE_THEME_SRC="${THEME_HOME}/${3}"
fi

check_opt() {
	status=1
	for theme in $AVAILABLE_THEMES; do
		if [ "$1" = $(basename "$theme") ]; then
			status=0
		fi
	done
	echo $status
}

print_available_themes() {
    NO_STYLE=$1
    if [ ! -z "$NO_STYLE" ]; then
        for theme in $AVAILABLE_THEMES; do
            echo "$(basename $theme)"
        done
        exit 0
    fi
    echo "Choose from the following themes:" 
    echo "-----------------"
    for theme in $AVAILABLE_THEMES; do
        echo "$(basename $theme)"
    done
    echo "-----------------"
}

create_theme() {
    NEW_THEME=$1
    if [ ! -d "$CREATE_THEME_SRC" ]; then
        notify-warn $FUNCNAME \
            "Source theme not found: $CREATE_THEME_SRC. Using skeleton."
        CREATE_THEME_SRC="${THEME_HOME}/.skeleton"
    fi
    if [ ! -d "$CREATE_THEME_SRC" ]; then
        notify-log $FUNCNAME "Theme skeleton seems to be missing. Aborted."
        return 1
    fi
    if [ -d "$NEW_THEME" ]; then
        notify-warn $FUNCNAME "A theme by the name $NEW_THEME already exists."
        return 1
    fi
    if [ -z $NEW_THEME ]; then
        notify-log $FUNCNAME "Theme name missing. Aborted."
        return 1
    fi
    OUT_DIR="${THEME_HOME}/${NEW_THEME}"
    cp -r "$CREATE_THEME_SRC" "$OUT_DIR"
    notify-log $FUNCNAME "New theme created at ${OUT_DIR}"
    return 0
}

ACTIVE_MODULES=
clean_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_clean; done
}
theme_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_theme; done
}
reload_all() {
    for MOD in "${ACTIVE_MODULES[@]}"; do ${MOD}_reload; done
}
load_modules() {
    readarray -t ACTIVE_MODULES < "$INCLUDE_DIR/active-modules"
    for MOD in "${ACTIVE_MODULES[@]}"; do
        if [ ! -f "$INCLUDE_DIR/modules/$MOD" ]; then
            notify-err $FUNCNAME \
                "Missing module: $MOD. Please remove from active-modules."
            continue
        fi
        source "$INCLUDE_DIR/modules/$MOD"
        notify-debug $FUNCNAME "Loaded $MOD"
    done
    source "$INCLUDE_DIR/util/css"
}

THEME=
main() {
    COMMAND="$1"
    shift
    ARG="$@"
    case "$COMMAND" in
        "get")
            echo $THEME
            ;;
        "ls")
            print_available_themes nostyle
            ;;
        "clear" | "color" | "create" | "reload" | "set")
            source "$INCLUDE_DIR/util/log"
            source "$INCLUDE_DIR/util/file"
            ;;&
        "color")
            source "$INCLUDE_DIR/util/color"
            themecolor $ARG # Unquoted on purpose...
            ;;
        "create")
            create_theme "$ARG"
            ;;
        "set")
            THEME_NEW="$ARG"
            if [ $(check_opt $THEME_NEW) != 0 ]; then
                notify-err $FUNCNAME "Invalid argument: $THEME_NEW"
                print_available_themes
                exit 1
            fi
            if [ "$THEME_NEW" = "$THEME" ]; then
                notify-warn $FUNCNAME \
                    "Theme already set to:\n> $THEME\n\nTo reapply files, reload."
                exit 0
            fi
            THEME=$THEME_NEW
            echo "$THEME" > "$THEME_HOME/current-theme"
            notify-log "$FUNCNAME" "Theme files updated for: $THEME"
            ;;&
        "clear")
            clear_files "$THEME_HOME/current-theme"
            THEME=
            ;;&
        "clear" | "reload" | "set")
            THEME=${THEME:-".skeleton"}
            COLORS_JSON="$THEME_HOME/$THEME/colors.json"
            TC_DIR="$THEME_HOME/$THEME" 
            load_modules "$INCLUDE_DIR/active-modules"
            clean_all && theme_all && reload_all && \
                notify-log $FUNCNAME "Theme loaded: $THEME"
            ;;
        *)
            echo "Unknown command: $COMMAND"
            ;;
    esac
}


# Checks
if [ "${#ACTIVE_MODULES[@]}" = "0" ]; then
    >&2 echo "No modules loaded. Nothing to do."
    exit 1
fi
if [ ! -d "$THEME_HOME" ]; then
    >&2 echo "No theme home found at ${THEME_HOME}. Exiting."
    exit 1
fi
if [ $# -eq 0 ]; then
	echo "No arguments supplied."
	exit 1
fi

# Get current theme data
[ ! -f "$THEME_HOME/current-theme" ] && touch "$THEME_HOME/current-theme"
THEME="$(cat $THEME_HOME/current-theme)"
AVAILABLE_THEMES="$(ls -1d $THEME_HOME/*/ | sed -e 's/\///')"

main $@

