#!/usr/bin/env bash

# Validate env
THEME_DIR=${THEME_DIR:-"$HOME/.config/theme"}
KITTY_CONFIG_DIRECTORY="${KITTY_CONFIG_DIRECTORY:-$XDG_CONFIG_HOME/kitty}"
WAYBAR_CONFIG_DIRECTORY="${WAYBAR_CONFIG_DIRECTORY:-$XDG_CONFIG_HOME/waybar}"
HYPR_CONFIG_DIRECTORY="${HYPR_CONFIG_DIRECTORY:-$XDG_CONFIG_HOME/hypr}"
# TODO: implement rofi and dunst
ROFI_CONFIG_DIRECTORY="${ROFI_CONFIG_DIRECTORY:-$XDG_CONFIG_HOME/rofi}"
DUNST_CONFIG_DIRECTORY="${DUNST_CONFIG_DIRECTORY:-$XDG_CONFIG_HOME/dunst}"
###

# Error if argument is missing
if [ $# -eq 0 ]; then
	echo "No arguments supplied."
	exit 1
fi
COMMAND=$1
ARG=$2

# Get theme data
THEME="$(cat $THEME_DIR/current-theme)"
available_themes="$(ls -1d $THEME_DIR/*/ | sed -e 's/\///')"

# Expose config variables to helpers
THEME_CONFIG_HYPRLAND=
THEME_CONFIG_WAYBAR=
THEME_CONFIG_ROFI= # TODO: IMPLEMENT
THEME_CONFIG_DUNST= # TODO: IMPLEMENT

check_opt() {
	status=1
	for theme in $available_themes; do
		if [ "$1" = $(basename "$theme") ]; then
			status=0
		fi
	done
	echo $status
}

print_available_themes() {
	echo "Choose from the following themes:" 
	echo "-----------------"
	for theme in $available_themes; do
		echo "$(basename $theme)"
	done
	echo "-----------------"
}

# Output:
# current-theme.conf (built from colors.json)
theme_kitty() {
	COLORS_JSON=$1
	OUT_FILE="$KITTY_CONFIG_DIRECTORY/current-theme.conf"
	rm -f $OUT_FILE && touch $OUT_FILE
	COLORBG=$(jq -r .[\"special\"].background $COLORS_JSON);
	if [ "$COLORBG" != "null" ]; then
		echo -e "background\t\t$COLORBG" >> $OUT_FILE
	fi
	COLORFG=$(jq -r .[\"special\"].foreground $COLORS_JSON);
	if [ "$COLORFG" != "null" ]; then
		echo -e "foreground\t\t$COLORFG" >> $OUT_FILE
	fi
	COLORSELBG=$(jq -r .[\"special\"].selection_background $COLORS_JSON);
	if [ "$COLORSELBG" != "null" ]; then
		echo -e "selection_background\t$COLORSELBG" >> $OUT_FILE
	fi
	COLORSELFG=$(jq -r .[\"special\"].selection_foreground $COLORS_JSON);
	if [ "$COLORSELFG" != "null" ]; then
		echo -e "selection_foreground\t$COLORSELFG" >> $OUT_FILE
	fi
	COLORCUR=$(jq -r .[\"special\"].cursor $COLORS_JSON);
	if [ "$COLORCUR" != "null" ]; then
		echo -e "cursor\t\t\t$COLORCUR" >> $OUT_FILE
	fi
	for idx in $(seq 0 15); do
		COLOR=$(jq -r .[\"colors\"].color$idx $COLORS_JSON)
		if [ "$COLOR" != "null" ]; then
			echo -e "color$idx\t\t\t$COLOR" >> $OUT_FILE
		fi
	done
}

# Out:
# colors.css (waybar CSS color definitions)
# rules.css (waybar CSS rules)
theme_waybar() {
	COLORS_JSON=$1
	COLORS_OUT="$WAYBAR_CONFIG_DIRECTORY/theme/colors.css"
	RULES_OUT="$WAYBAR_CONFIG_DIRECTORY/theme/rules.css"
	rm -f $COLORS_OUT && touch $COLORS_OUT
	rm -f $RULES_OUT && touch $RULES_OUT
	COLORBG=$(jq -r .[\"special\"].background $COLORS_JSON);
	if [ "$COLORBG" != "null" ]; then
		echo -e "@define-color colorbg $COLORBG;" >> $COLORS_OUT
	fi
	COLORFG=$(jq -r .[\"special\"].foreground $COLORS_JSON);
	if [ "$COLORFG" != "null" ]; then
		echo -e "@define-color colorfg $COLORFG;" >> $COLORS_OUT
	fi
	COLORSELBG=$(jq -r .[\"special\"].selection_background $COLORS_JSON);
	if [ "$COLORSELBG" != "null" ]; then
		echo -e "@define-color colorsbg $COLORSELBG;" >> $COLORS_OUT
	fi
	COLORSELFG=$(jq -r .[\"special\"].selection_foreground $COLORS_JSON);
	if [ "$COLORSELFG" != "null" ]; then
		echo -e "@define-color colorsfg $COLORSELFG;" >> $COLORS_OUT
	fi
	for idx in $(seq 0 15); do
		COLOR=$(jq -r .[\"colors\"].color$idx $COLORS_JSON)
		if [ "$COLOR" != "null" ]; then
			echo -e "@define-color color$idx $COLOR;" >> $COLORS_OUT
		fi
	done
    if [ -f "$THEME_CONFIG_WAYBAR" ]; then
        cp "$THEME_CONFIG_WAYBAR" "$RULES_OUT"
    else
		>&2 echo "WARN: No waybar rules found at $THEME_CONFIG_WAYBAR. Ignoring."
	fi
}

# Out:
# theme.conf (hyprland configuration file)
theme_hyprland() {
    OUT="$HYPR_CONFIG_DIRECTORY/theme.conf"
    echo "" > "$OUT"
    if [ -f "$THEME_CONFIG_HYPRLAND" ]; then
        cp "$THEME_CONFIG_HYPRLAND" "$OUT"
    else
        >&2 echo "WARN: No hyprland configuration found at $THEM_CONFIG_HYPRLAND. Ignoring."
    fi
}

refresh_kitty() {
	kill -SIGUSR1 $(pgrep kitty)
}

refresh_waybar() {
	[[ ! -z $(pgrep -x "waybar") ]] && killall waybar
	waybar > /dev/null 2>&1 &
}

refresh_hyprpaper() {
	WALLPAPER_DIR="$THEME_DIR/$THEME/wallpapers"
	MONITORS=$(hyprctl monitors -j | jq -r -r '.[] | .name')
	echo -n "" > "$HYPR_CONFIG_DIRECTORY/hyprpaper.conf"
    WALLPAPERS=$(find "$WALLPAPER_DIR" -type f | shuf)
    i=1
	for MONITOR in $MONITORS; do
		WALLPAPER=$(echo "$WALLPAPERS"| head -n $i | tail -n 1)
		echo "preload = $WALLPAPER" >> "$HYPR_CONFIG_DIRECTORY/hyprpaper.conf"
		echo "wallpaper = $MONITOR, contain:$WALLPAPER" >> "$HYPR_CONFIG_DIRECTORY/hyprpaper.conf"
		hyprctl hyprpaper reload "$MONITOR","$WALLPAPER" > /dev/null 2>&1
        i=$(($i+1))
	done
}

refresh_hyprland() {
    hyprctl reload > /dev/null 2>&1
}

case "$COMMAND" in
	"set")
		THEME_NEW=$ARG
		if [ $(check_opt $THEME_NEW) != 0 ]; then
			echo "Invalid argument."
			print_available_themes
			exit 1
		fi
		THEME=$THEME_NEW
		echo "$THEME" > "$THEME_DIR/current-theme"
		echo "Theme successfully changed to: $THEME"
        ;;&
	"set" | "reload")
        THEME_CONFIG_DIR="$THEME_DIR/$THEME/config"
        THEME_CONFIG_HYPRLAND="$THEME_CONFIG_DIR/hyprland/theme.conf"
        THEME_CONFIG_WAYBAR="$THEME_CONFIG_DIR/waybar/rules.css"
        THEME_CONFIG_ROFI="$THEME_CONFIG_DIR/rofi/theme.rasi"
        THEME_CONFIG_DUNST="$THEME_CONFIG_DIR/dunst/theme"
		if [ -z $THEME ]; then
			echo "Theme not set. Nothing to do."
			exit 0
		fi
        COLORS_JSON="$THEME_DIR/$THEME/colors.json"
		if test -f "$COLORS_JSON"; then
			theme_kitty "$COLORS_JSON"
			theme_waybar "$COLORS_JSON"
            theme_hyprland
		fi
		refresh_kitty
		refresh_waybar
		refresh_hyprpaper
        refresh_hyprland
		;;
	"get")
		echo $THEME
		;;
	*)
		echo "Unknown command: $COMMAND"
		;;
esac

