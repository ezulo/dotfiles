#!/usr/bin/env bash

# Validate env
THEME_DIR=$THEME_DIR
KITTY_CONFIG_DIRECTORY=$KITTY_CONFIG_DIRECTORY
WAYBAR_CONFIG_DIRECTORY=$WAYBAR_CONFIG_DIRECTORY
HYPRPAPER_CONFIG_DIRECTORY=$HYPRPAPER_CONFIG_DIRECTORY
if [ -z "$THEME_DIR" ]; then
	THEME_DIR="$HOME/theme"
fi
if [ -z "$KITTY_CONFIG_DIRECTORY" ]; then
	KITTY_CONFIG_DIRECTORY="$HOME/.config/kitty"
fi
if [ -z "$WAYBAR_CONFIG_DIRECTORY" ]; then
	WAYBAR_CONFIG_DIRECTORY="$HOME/.config/waybar"
fi
if [ -z "$HYPRPAPER_CONFIG_DIRECTORY" ]; then
	HYPRPAPER_CONFIG_DIRECTORY="$HOME/.config/hypr"
fi

# Error if argument is missing
if [ $# -eq 0 ]; then
	echo "No arguments supplied."
	exit 1
fi
COMMAND=$1
ARG=$2

# Get theme data
THEME="$(cat $THEME_DIR/current-theme)"
available_themes="$(ls -1d $THEME_DIR/*/ | sed -e 's/\///')"

# Helper function to check args against available themes
check_opt() {
	status=1
	for theme in $available_themes; do
		if [ "$1" = $(basename "$theme") ]; then
			status=0
		fi
	done
	echo $status
}

# Helper function to print available themes
print_available_themes() {
	echo "Choose from the following themes:" 
	echo "-----------------"
	for theme in $available_themes; do
		echo "$(basename $theme)"
	done
	echo "-----------------"
}

# Helper function to transform config for kitty
schemejson_to_kitty() {
	SCHEME_JSON=$1
	OUT_FILE=$2
	rm -f $OUT_FILE && touch $OUT_FILE
	COLORBG=$(jq -r .[\"special\"].background $SCHEME_JSON);
	if [ "$COLORBG" != "null" ]; then
		echo -e "background\t\t$COLORBG" >> $OUT_FILE
	fi
	COLORFG=$(jq -r .[\"special\"].foreground $SCHEME_JSON);
	if [ "$COLORFG" != "null" ]; then
		echo -e "foreground\t\t$COLORFG" >> $OUT_FILE
	fi
	COLORSELBG=$(jq -r .[\"special\"].selection_background $SCHEME_JSON);
	if [ "$COLORSELBG" != "null" ]; then
		echo -e "selection_background\t$COLORSELBG" >> $OUT_FILE
	fi
	COLORSELFG=$(jq -r .[\"special\"].selection_foreground $SCHEME_JSON);
	if [ "$COLORSELFG" != "null" ]; then
		echo -e "selection_foreground\t$COLORSELFG" >> $OUT_FILE
	fi
	COLORCUR=$(jq -r .[\"special\"].cursor $SCHEME_JSON);
	if [ "$COLORCUR" != "null" ]; then
		echo -e "cursor\t\t\t$COLORCUR" >> $OUT_FILE
	fi
	for idx in $(seq 0 15); do
		COLOR=$(jq -r .[\"colors\"].color$idx $SCHEME_JSON)
		if [ "$COLOR" != "null" ]; then
			echo -e "color$idx\t\t\t$COLOR" >> $OUT_FILE
		fi
	done
}

# Helper function to transform colors file for waybar
schemejson_to_waybar() {
	SCHEME_JSON=$1
	THEME_FILE=$2
	RULE_FILE=$3
	rm -f $THEME_FILE && touch $THEME_FILE
	rm -f $RULE_FILE && touch $RULE_FILE
	COLORBG=$(jq -r .[\"special\"].background $SCHEME_JSON);
	if [ "$COLORBG" != "null" ]; then
		echo -e "@define-color colorbg $COLORBG;" >> $THEME_FILE
	fi
	COLORFG=$(jq -r .[\"special\"].foreground $SCHEME_JSON);
	if [ "$COLORFG" != "null" ]; then
		echo -e "@define-color colorfg $COLORFG;" >> $THEME_FILE
	fi
	COLORSELBG=$(jq -r .[\"special\"].selection_background $SCHEME_JSON);
	if [ "$COLORSELBG" != "null" ]; then
		echo -e "@define-color colorsbg $COLORSELBG;" >> $THEME_FILE
	fi
	COLORSELFG=$(jq -r .[\"special\"].selection_foreground $SCHEME_JSON);
	if [ "$COLORSELFG" != "null" ]; then
		echo -e "@define-color colorsfg $COLORSELFG;" >> $THEME_FILE
	fi
	for idx in $(seq 0 15); do
		COLOR=$(jq -r .[\"colors\"].color$idx $SCHEME_JSON)
		if [ "$COLOR" != "null" ]; then
			echo -e "@define-color color$idx $COLOR;" >> $THEME_FILE
		fi
	done
	if [ $(jq 'has("waybar_rules")' $SCHEME_JSON) == "true" ]; then
		jq -r -c .[\"waybar_rules\"].[] $SCHEME_JSON | while read rule; do
			echo $rule >> $RULE_FILE
		done
	else
		echo "No waybar rules found. Ignoring."
	fi
}

# Helper function to refresh kitty instances
refresh_kitty() {
	kill -SIGUSR1 $(pgrep kitty)
}

# Helper function to refresh waybar
refresh_waybar() {
	if [[ ! -z $(pgrep -x "waybar") ]]; then
		killall waybar
	fi
	waybar > /dev/null 2>&1 &
}

refresh_hyprpaper() {
	WALLPAPER_DIR="$THEME_DIR/$THEME/wallpapers"
	MONITORS=$(hyprctl monitors -j | jq -r -r '.[] | .name')
	echo -n "" > "$HYPRPAPER_CONFIG_DIRECTORY/hyprpaper.conf"
	for MONITOR in $MONITORS; do
		WALLPAPER=$(find "$WALLPAPER_DIR" -type f | shuf -n 1)
		echo "preload = $WALLPAPER" >> "$HYPRPAPER_CONFIG_DIRECTORY/hyprpaper.conf"
		echo "wallpaper = $MONITOR, $WALLPAPER" >> "$HYPRPAPER_CONFIG_DIRECTORY/hyprpaper.conf"
		hyprctl hyprpaper reload "$MONITOR","$WALLPAPER" > /dev/null 2>&1
	done
}

case "$COMMAND" in
	"set")
		THEME_NEW=$ARG
		if [ $(check_opt $THEME_NEW) != 0 ]; then
			echo "Invalid argument."
			print_available_themes
			exit 1
		fi
		THEME=$THEME_NEW
		echo "$THEME" > "$THEME_DIR/current-theme"
		echo "Theme successfully changed to: $THEME"
		;;&
	"set" | "reload")
		if [ -z $THEME ]; then
			echo "Theme not set. Nothing to do."
			exit 0
		fi
		echo -n "" > "$KITTY_CONFIG_DIRECTORY/current-theme.conf"
		echo -n "" > "$WAYBAR_CONFIG_DIRECTORY/theme.css"
		echo -n "" > "$WAYBAR_CONFIG_DIRECTORY/theme-rules.css"
		if test -f "$THEME_DIR/$THEME/scheme.json"; then
			SCHEME_FILE="$THEME_DIR/$THEME/scheme.json"
			# Update kitty
			schemejson_to_kitty "$SCHEME_FILE" /tmp/kitty.conf
			if [ $? == 0 ]; then
				mv /tmp/kitty.conf "$KITTY_CONFIG_DIRECTORY/current-theme.conf"
			fi
			# Update waybar
			schemejson_to_waybar "$SCHEME_FILE" \
				/tmp/waybar.css /tmp/waybar-rules.css
			if [ $? == 0 ]; then
				mv /tmp/waybar.css "$WAYBAR_CONFIG_DIRECTORY/theme.css"
				mv /tmp/waybar-rules.css "$WAYBAR_CONFIG_DIRECTORY/theme-rules.css"
			else
				echo "Error occured in schemejson_to_waybar: $?"
			fi
		fi
		refresh_kitty
		refresh_waybar
		refresh_hyprpaper
		;;
	"get")
		echo $THEME
		;;
	*)
		echo "Unknown command: $COMMAND"
		;;
esac

