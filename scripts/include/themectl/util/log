#!/usr/bin/env bash

#
# This themectl utility handles common logging functions.
# It is probably more convoluted than it needs to be.
#
# `notify-log` | `notify-warn` | `notify-err`
# Will log to stdout OR stderr and send the log to a notification daemon.
#
# `notify-debug`
# Only logs to stdout.
#
# Note to self (on stdout logging):
# Any function returning output through stdout should log with "no_echo":
# ` notify-log $FUNCNAME "Hello world" no_echo `
# This applies only to `notify-log` and `notify-debug`
#

# Notification daemon commands, change these if using something else
N_CMD_LOG="  notify-send --urgency=low   "
N_CMD_WARN=" notify-send --urgency=normal"
N_CMD_ERR="  notify-send --urgency=normal"

ID="themectl"
SEP=$(perl -E 'say "-" x 35')

log_to_stdout() {
    echo "$ID:$1:$2" "$3"
}

log_to_stderr() {
    >&2 echo "$ID:$1:$2" "$3"
}

__log() {
    local FUNC="$1"
    local LEVEL="$2"
    local MSG="$3"
    local NO_ECHO="$4"
    local HEADER="$ID:$FUNC:$LEVEL"
    local STREAM=
    case "$LEVEL" in
        LOG)
            STREAM="stdout" && $N_CMD_LOG  "$HEADER" "$MSG"
            ;;
        WARN)
            STREAM="stderr" && $N_CMD_WARN "$HEADER" "$MSG"
            ;;
        ERR)
            STREAM="stderr" && $N_CMD_ERR  "$HEADER" "$MSG"
            ;;
        DEBUG)
            STREAM="stdout"
            ;;
    esac
    [ -z "$NO_ECHO" ] && case "$STREAM" in
        stdout)
            echo "$ID:$FUNC:$LEVEL" "$MSG"
            ;;
        stderr)
        >&2 echo "$ID:$FUNC:$LEVEL" "$MSG"
            ;;
    esac
}

notify-log() {
    __log "$1" "LOG" "$2" "$3"
}

notify-warn() {
    __log "$1" "WARN" "$2" "$3"
}

notify-err() {
    __log "$1" "ERR" "$2" "$3"
}

notify-debug() {
    __log "$1" "DEBUG" "$2" "$3"
}

