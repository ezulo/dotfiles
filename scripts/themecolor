#!/usr/bin/env bash

# This script pulls color values out of the current theme's `scheme.json`
# Use: `$ color <color_key>`
# `color_key` can be the following:
# * `color[0-15]` (resolves JSON ["colors"].color[0-15], with colored output)
# * `foreground|background|...etc` (resolves any key under JSON ["special"])
#
# A second output "noformat" can be specified to omit newlines and coloration:
# `$ color <color_key> noformat`

# Luminance Delta Threshold (0 through 255)
# Delta in luminance between background and color
# when background and color are too similar, we color the background instead.
L_DELTA_THRESHOLD=70

# Global
BG_L=

THEME=$(cat $THEME_DIR/current-theme)
if [ -z $THEME ]; then
    >&2 echo "No theme detected. Set 'THEME' environment var to your theme name."
    exit 1
fi
SCHEME_JSON="$THEME_DIR/$THEME/colors.json"
if [ ! -f $SCHEME_JSON ]; then
    >&2 echo "scheme.json not found at $THEME_DIR/$THEME"
    >&2 echo "Does this theme not have a color scheme defined?"
    exit 1
fi

QUERY=$1
NOFORMAT=$2

if [[ "$QUERY" =~ [0-9]+ ]]; then
    QUERY="color${QUERY}"
fi

rgb_luminance() {
    EQ="0.2126 * $1 + 0.7152 * $2 + 0.0722 * $3"
    L=$(echo "$EQ" | bc);
    printf "%.0f" "$L"
}

# Helper function to add color to output
# Also calculates luminance delta with background, and colors background
# if delta is too small (color would not be visible)
format_out_hex() {
    HEX=$1 #e.g. "#012345"
    R=$((16#"${HEX:1:2}"))
    G=$((16#"${HEX:3:2}"))
    B=$((16#"${HEX:5:2}"))
    L=$(rgb_luminance $R $G $B)
    COL_FG="\\033[38;2"
    COL_BG="\\033[48;2"
    COL_SEQ="${COL_FG};${R};${G};${B}m"
    COL_CLEAR='\033[0m'
    L_DELTA=$(echo "$BG_L - $L" | bc)
    if [ ${L_DELTA#-} -lt $L_DELTA_THRESHOLD ]; then
        COL_SEQ="${COL_BG};${R};${G};${B}m"
    fi
    echo -e "${COL_SEQ}${HEX}${COL_CLEAR}"
}

BG_HEX="$(jq -r .[\"special\"].background $SCHEME_JSON)"
BG_R=$((16#${BG_HEX:1:2}))
BG_G=$((16#${BG_HEX:3:2}))
BG_B=$((16#${BG_HEX:5:2}))
BG_L="$(rgb_luminance $BG_R $BG_G $BG_B)"
case $QUERY in
    color*)
        COLOR_CODE=$(printf '%s\n' "${QUERY#*color}")
        if [ $COLOR_CODE -gt 15 ] || [ $COLOR_CODE -lt 0 ]; then
            >&2 echo "Only numeric colors 0-15 are valid."
            exit 1
        fi
		COLOR=$(jq -r .[\"colors\"].$QUERY $SCHEME_JSON)
        if [ "$2" == "noformat" ]; then
            # For use in scripts, mostly. We omit the newline and coloration
            echo -n $COLOR
        else
            echo $(format_out_hex $COLOR)
        fi
        ;;
    *)
        COLOR=$(jq -r .[\"special\"].$QUERY $SCHEME_JSON)
        if [ "$COLOR" == "null" ]; then
            >&2 echo "Color not found: $COLOR"
            exit 1; 
        fi
        if [ "$2" == "noformat" ]; then
            echo -n $COLOR
        else
            echo $COLOR
        fi
        ;;
esac

